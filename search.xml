<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>hexo改动日记</title>
      <link href="2021/12/28/hexo-change/"/>
      <url>2021/12/28/hexo-change/</url>
      
        <content type="html"><![CDATA[<h2 id="hexo改动日记"><a href="#hexo改动日记" class="headerlink" title="hexo改动日记"></a>hexo改动日记</h2><p>不得不说，从建站到现在，一直都在魔改的路上，有时候一出现问题，对小白新手来说（我），真的很无助，这篇文章主要给自己做个笔记，方便以后把博客搞崩了，卑微还原😄。<br>Markdown语法移步<a href="https://markdown.com.cn/basic-syntax/">传送门biu~</a></p>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -🍬hexo -笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>html学习</title>
      <link href="2021/11/17/html%E5%AD%A6%E4%B9%A0/"/>
      <url>2021/11/17/html%E5%AD%A6%E4%B9%A0/</url>
      
        <content type="html"><![CDATA[<p><font face="face" color="#0099ff">自己写了几个效果图，求轻喷。</font></p>]]></content>
      
      
      <categories>
          
          <category> 分类 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -html -css </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>vs2019重装问题</title>
      <link href="2021/02/25/vs/"/>
      <url>2021/02/25/vs/</url>
      
        <content type="html"><![CDATA[<h3 id="vs2019卸载重装问题"><a href="#vs2019卸载重装问题" class="headerlink" title="vs2019卸载重装问题"></a>vs2019卸载重装问题</h3><p>我的是win10系统。可能每个人遇到的情况不一样，此文仅供参考。</p><p>vs2019下载之后，就不要随意挪位置了，会出现桌面图标显示不出的问题。</p><p>之后打开vs2019时，可能会出现  “请重新安装应用程序”  字样。可以在控制面版删掉vs2019。</p><p>然后若是再安装vs2019时，选择安装路径，右下角会出现   “无法在非空目录上安装vs2019”    字样。</p><p>解决办法：鼠标右键单击此电脑，选择属性，打开 ”控制面板主页“ ，点击 “程序” ，再点击 “启用或关闭windows功能” ，之后会看到</p><p>“.NET Framework3.5（包括.NET 2.0和3.0）” 未被勾选，“.NET Framework 4.8 Advanced Services”  被勾选。 接下来要取消被勾选的Advanced Services。然后点击确定，卸载中。。。。。出现 “windows已完成请求的更改”  ，然后再关闭。</p><p>之后再下载.NET Framework以及vs2019就能正常使用了（具体过程请参考b站up-C3，讲的特详细)。<br>弄完之后就算再删掉vs2019,再重新安装vs2019也不会出现   “无法再非空目录上安装vs2019”  的问题。</p><p>之前登录过账号，所以数据不会丢失。但窗口背景插件需要重新安装。</p><p>此方法亲测有效。</p><h3 id="vs2019窗口美化"><a href="#vs2019窗口美化" class="headerlink" title="vs2019窗口美化"></a>vs2019窗口美化</h3><p><img src="http://dongxixian.github.io/images/5.png" alt="窗口图片示例"></p><p>附上本人的图。</p><p>步骤：1.打开vs2019，左上角找到 ：扩展–》管理扩展–》</p><p>联机–》搜索框–》搜“Claudia IDE”–》下载 –》重启vs2019</p><p>2.调试–》选项–》Claudia IDE–》图像拉伸–》Fill。</p><p>图片路径–》选择自己图片的路径</p><p>透明度–》根据自己的图片调整，可多次调，为了不影响代码的观感，建议0.5以下。</p><p>over。。。。。</p>]]></content>
      
      
      <categories>
          
          <category> 程序 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -vs2019 -程序 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>C语言学习笔记</title>
      <link href="2021/02/24/Cyuyangainian/"/>
      <url>2021/02/24/Cyuyangainian/</url>
      
        <content type="html"><![CDATA[<h3 id="数据的存储1"><a href="#数据的存储1" class="headerlink" title="数据的存储1."></a>数据的存储1.</h3><h5 id="类型的基本归类"><a href="#类型的基本归类" class="headerlink" title="类型的基本归类"></a>类型的基本归类</h5><h6 id="内置类型"><a href="#内置类型" class="headerlink" title="内置类型"></a>内置类型</h6><table><thead><tr><th>整形</th><th></th></tr></thead><tbody><tr><td>char</td><td>unsigned char ,signed char</td></tr><tr><td>short</td><td>unsigned short[int] , signed short[int]</td></tr><tr><td>int</td><td>unsigned int , signed int</td></tr><tr><td>long</td><td>unsigned long , signed long</td></tr><tr><td>浮点型</td><td></td></tr><tr><td>float</td><td></td></tr><tr><td>double</td><td></td></tr><tr><td></td><td></td></tr></tbody></table><h6 id="构造类型："><a href="#构造类型：" class="headerlink" title="构造类型："></a>构造类型：</h6><p>   数组类型，</p><p>   结构体类型【struct】，</p><p>   枚举类型【enum】，</p><p>   联合类型【union】；</p><h6 id="指针类型"><a href="#指针类型" class="headerlink" title="指针类型"></a>指针类型</h6><p>int *pi；</p><p>char *pr；</p><h6 id="空类型"><a href="#空类型" class="headerlink" title="空类型"></a>空类型</h6><p>void 通常应用于函数的返回类型，函数的参数指针类型；</p><p>void *pv；无具体类型的指针</p><h4 id="原码，反码，补码"><a href="#原码，反码，补码" class="headerlink" title="原码，反码，补码"></a>原码，反码，补码</h4><p>计算机中的有符号数的三种表示方法</p><p>三种表示方法均有符号位和数值位两个部分，符号位用0表示“正”，用1表示“负”，二数值位三种表示方法各不相同；</p><p>正数的原，反，补码相同；</p><p>对于整形来说：数据存放内存中其实存放的是补码；</p><p>原因：</p><p>再计算机系统中，数值一律用补码来表示和存储。原因在于，使用补码，可以将符号位和数值域统一处理，同时，加法和减法也可以统一处理（CPU只有加法器），此外，原码与补码相互转换，其运算过程是相同的，不需要额外的硬件电路</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token number">1</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">;</span><span class="token comment">//1+（-1）</span>        <span class="token comment">//原码相加：</span>    <span class="token comment">//00000000000000000000000000000001</span>    <span class="token comment">//10000000000000000000000000000001</span>    <span class="token comment">//10000000000000000000000000000010</span>        <span class="token comment">//反码相加：</span>    <span class="token comment">//10000000000000000000000000000001</span>    <span class="token comment">//11111111111111111111111111111110</span>    <span class="token comment">//11111111111111111111111111111111</span>        <span class="token comment">//补码相加：</span>    <span class="token comment">//00000000000000000000000000000001</span>    <span class="token comment">//11111111111111111111111111111111</span>    <span class="token comment">//10000000000000000000000000000000</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h6 id="原码"><a href="#原码" class="headerlink" title="原码"></a>原码</h6><p>直接将二进制按照正负的形式翻译成二进制就可以；</p><h6 id="反码"><a href="#反码" class="headerlink" title="反码"></a>反码</h6><p>将原码的符号位不变，其他位次依次按位取反得到；</p><h6 id="补码"><a href="#补码" class="headerlink" title="补码"></a>补码</h6><p>反码+1；</p><pre class="line-numbers language-c" data-language="c"><code class="language-c"><span class="token keyword">int</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">&#123;</span>    <span class="token keyword">int</span> a<span class="token operator">=</span><span class="token number">20</span><span class="token punctuation">;</span><span class="token comment">//4个字节-32bit，一个字节8bit</span>    <span class="token comment">//00000000000000000000000000010100-原码</span>    <span class="token comment">//00000000000000000000000000010100-反码</span>    <span class="token comment">//0000 0000 000000000000000000010100-补码</span>    <span class="token comment">//0X00000014十六进制位</span>    <span class="token keyword">int</span> b<span class="token operator">=</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">;</span>    <span class="token comment">//00000000000000000000000000001010-原码</span>    <span class="token comment">//11111111111111111111111111110101-反码</span>    <span class="token comment">//1111 1111 11111111111111111111 0110-补码</span>    <span class="token comment">//8421 </span>    <span class="token comment">//0XFFFFFFF6</span>    <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>整数：</p><p>1.有符号数</p><p>正数：原码，反码，补码相同</p><p>负数：原码，反码，补码不同，要进行计算</p><p>2.无符号数</p><p>原码，反码，补码相同</p><h6 id="大端，小端"><a href="#大端，小端" class="headerlink" title="大端，小端"></a>大端，小端</h6><p>【大小端字节序存储模式】</p><p>大端（存储）模式，数据的低位保存在内存的高地址中，而数据的高位保存在内存的低地址中</p><p>小端（存储）模式，数据的低位保存在内存的低地址中，而数据的高位保存在内存的高地址中</p><h4 id="c语言头文件："><a href="#c语言头文件：" class="headerlink" title="c语言头文件："></a>c语言头文件：</h4><h5 id="1-include-lt-stdlib-h-gt-使用："><a href="#1-include-lt-stdlib-h-gt-使用：" class="headerlink" title="1.#include&lt;stdlib.h&gt;使用："></a>1.#include&lt;stdlib.h&gt;使用：</h5><p>stdlib.h里面定义了物种类型，一些宏和通用工具函数。在使用该类型，宏和通用工具函数时需要用stdlib.h头文件。</p><h6 id="类型："><a href="#类型：" class="headerlink" title="类型："></a>类型：</h6><p>size_t,  wchar_t,   div_t,  ldiv_t,  lldiv_t;</p><h6 id="宏："><a href="#宏：" class="headerlink" title="宏："></a>宏：</h6><p>EXIT_FAILURE,  EXIT_SUCCESS,   RAND_MAX,   MB_CUR_MAX等等；</p><h6 id="常用的函数："><a href="#常用的函数：" class="headerlink" title="常用的函数："></a>常用的函数：</h6><p>malloc(),   calloc(),   realloc(),   free(),    system(),   atoi(),   atol(),   rand(),  srand() 等等；</p>]]></content>
      
      
      <categories>
          
          <category> c语言 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> -c语言 -基础 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
